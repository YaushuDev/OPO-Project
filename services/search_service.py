# search_service.py
"""
Servicio para b√∫squeda de correos electr√≥nicos en bandejas de entrada reales.
Implementa b√∫squeda IMAP mejorada con m√∫ltiples criterios de asunto, detecci√≥n precisa
de correos por timestamp y suma de resultados con rango de fechas expandido.
"""

import imaplib
import email
import ssl
import json
import os
from pathlib import Path
from datetime import datetime, date, timedelta
from email.header import decode_header
from email.utils import parsedate_to_datetime


class SearchService:
    """Servicio para buscar correos electr√≥nicos reales v√≠a IMAP con detecci√≥n mejorada por timestamp."""

    # Mapeo de servidores SMTP a IMAP
    IMAP_SERVERS = {
        "smtp.gmail.com": {"server": "imap.gmail.com", "port": 993},
        "smtp-mail.outlook.com": {"server": "outlook.office365.com", "port": 993}
    }

    def __init__(self, data_dir=None, log_callback=None):
        """
        Inicializa el servicio de b√∫squeda IMAP mejorada.

        Args:
            data_dir (str, optional): Directorio de datos para cach√©. Por defecto "data".
            log_callback (callable, optional): Funci√≥n para registrar logs.
        """
        self.data_dir = Path(data_dir) if data_dir else Path("data")
        self.log_callback = log_callback
        self.smtp_config_file = Path("config") / "smtp_config.json"

        # Crear directorio de datos si no existe
        os.makedirs(self.data_dir, exist_ok=True)

        # Sistema de cach√© por d√≠a mejorado
        self.cache_file = self.data_dir / "daily_email_cache.json"
        self.email_cache = {}
        self._load_cache()

    def search_emails(self, profile):
        """
        Busca correos electr√≥nicos del d√≠a actual con detecci√≥n mejorada por timestamp.
        Utiliza rango de fechas expandido y verificaci√≥n manual de timestamps.

        Args:
            profile: Perfil de b√∫squeda con los criterios (puede tener hasta 3)

        Returns:
            int: N√∫mero total de correos encontrados sumando todos los criterios
        """
        self._log(f"üîç Iniciando b√∫squeda mejorada con perfil: {profile.name}")

        # Verificar que el perfil tenga criterios v√°lidos
        if not hasattr(profile, 'search_criteria') or not profile.search_criteria:
            self._log("‚ùå Error: El perfil no tiene criterios de b√∫squeda v√°lidos")
            return 0

        # Compatibilidad hacia atr√°s: convertir string a lista si es necesario
        criterios = profile.search_criteria
        if isinstance(criterios, str):
            criterios = [criterios]

        self._log(f"üìã Criterios configurados: {len(criterios)}")
        for i, criterio in enumerate(criterios, 1):
            self._log(f"  ‚îî‚îÄ‚îÄ Criterio {i}: '{criterio}'")

        start_time = datetime.now()
        total_found = 0

        try:
            # Cargar configuraci√≥n SMTP
            smtp_config = self._load_smtp_config()
            if not smtp_config:
                self._log("‚ùå Error: No se encontr√≥ configuraci√≥n SMTP")
                return 0

            # Buscar correos para cada criterio con m√©todo mejorado
            for i, criterio in enumerate(criterios, 1):
                self._log(f"üéØ Procesando criterio {i}/{len(criterios)}: '{criterio}'")

                # Crear clave de cach√© √∫nica para hoy y este criterio espec√≠fico
                today_str = date.today().isoformat()
                cache_key = f"{today_str}_{criterio.strip().lower()}"

                # Verificar cach√© para este criterio espec√≠fico
                if cache_key in self.email_cache:
                    count = self.email_cache[cache_key]
                    self._log(f"üíæ Usando resultados en cach√© para '{criterio}': {count} correos")
                else:
                    # Realizar b√∫squeda IMAP mejorada para este criterio
                    count = self._perform_enhanced_imap_search(smtp_config, criterio.strip())

                    # Guardar en cach√©
                    self.email_cache[cache_key] = count
                    self._save_cache()

                self._log(f"‚úÖ Criterio '{criterio}': {count} correos encontrados")
                total_found += count

            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            self._log(f"üèÅ B√∫squeda mejorada completada en {duration:.2f} segundos")
            self._log(f"üìä TOTAL de correos encontrados: {total_found} (suma de {len(criterios)} criterios)")

            return total_found

        except Exception as e:
            self._log(f"üí• Error durante la b√∫squeda mejorada: {e}")
            return 0

    def _perform_enhanced_imap_search(self, smtp_config, search_criteria):
        """
        Realiza b√∫squeda IMAP mejorada con rango de fechas expandido y verificaci√≥n de timestamp.

        Args:
            smtp_config (dict): Configuraci√≥n SMTP/IMAP
            search_criteria (str): Criterio de b√∫squeda para el asunto

        Returns:
            int: N√∫mero de correos que coinciden con este criterio espec√≠fico
        """
        mail = None
        try:
            # Obtener configuraci√≥n IMAP del servidor SMTP
            smtp_server = smtp_config.get('server')
            imap_config = self.IMAP_SERVERS.get(smtp_server)

            if not imap_config:
                self._log(f"‚ùå Servidor IMAP no soportado: {smtp_server}")
                return 0

            self._log(f"üîó Conectando a {imap_config['server']} para criterio '{search_criteria}'...")

            # Crear conexi√≥n IMAP con SSL
            mail = imaplib.IMAP4_SSL(imap_config['server'], imap_config['port'])

            # Autenticar con las mismas credenciales SMTP
            mail.login(smtp_config['username'], smtp_config['password'])

            # Seleccionar bandeja de entrada
            mail.select('inbox')

            # B√öSQUEDA MEJORADA: Usar rango de fechas expandido
            today = date.today()
            yesterday = today - timedelta(days=1)

            # Buscar correos desde ayer para capturar correos en el l√≠mite del d√≠a
            yesterday_str = yesterday.strftime("%d-%b-%Y")
            search_criteria_imap = f'(SINCE "{yesterday_str}")'

            self._log(f"üìÖ Buscando correos desde {yesterday_str} para filtrar por timestamp")

            status, messages = mail.search(None, search_criteria_imap)

            if status != 'OK':
                self._log(f"‚ùå Error al buscar correos para criterio '{search_criteria}'")
                return 0

            message_ids = messages[0].split()
            total_candidates = len(message_ids)

            if total_candidates == 0:
                self._log(f"üì≠ No hay correos candidatos para analizar")
                return 0

            self._log(f"üì¨ Analizando {total_candidates} correos candidatos para el criterio '{search_criteria}'...")

            # Filtrar por criterio de b√∫squeda y verificar timestamp del d√≠a actual
            matching_count = 0
            search_term = search_criteria.lower()
            today_start = datetime.combine(today, datetime.min.time())
            today_end = datetime.combine(today, datetime.max.time())

            for msg_id in message_ids:
                try:
                    # Obtener el correo con headers
                    status, msg_data = mail.fetch(msg_id, '(RFC822)')

                    if status != 'OK':
                        continue

                    # Parsear el mensaje
                    email_message = email.message_from_bytes(msg_data[0][1])

                    # Verificar timestamp del correo
                    date_header = email_message.get('Date')
                    if not date_header:
                        continue

                    try:
                        # Convertir fecha del correo a datetime
                        email_datetime = parsedate_to_datetime(date_header)

                        # Convertir a fecha local si tiene zona horaria
                        if email_datetime.tzinfo is not None:
                            email_datetime = email_datetime.astimezone()
                            # Remover zona horaria para comparaci√≥n
                            email_datetime = email_datetime.replace(tzinfo=None)

                        # VERIFICACI√ìN MEJORADA: Solo correos del d√≠a actual
                        if not (today_start <= email_datetime <= today_end):
                            continue

                    except (ValueError, TypeError) as e:
                        self._log(f"‚ö†Ô∏è Error procesando fecha del correo {msg_id}: {e}")
                        continue

                    # Verificar el criterio de b√∫squeda en el asunto
                    subject = email_message['subject']
                    if subject:
                        # Decodificar el asunto si est√° codificado
                        decoded_subject = self._decode_subject(subject)

                        # Verificar si el criterio de b√∫squeda est√° en el asunto
                        if search_term in decoded_subject.lower():
                            matching_count += 1
                            timestamp_str = email_datetime.strftime("%H:%M:%S")
                            self._log(f"‚ú® Match encontrado [{timestamp_str}]: {decoded_subject[:60]}...")

                except Exception as e:
                    self._log(f"‚ö†Ô∏è Error procesando mensaje {msg_id}: {e}")
                    continue

            self._log(
                f"üéØ Criterio '{search_criteria}': {matching_count}/{total_candidates} correos v√°lidos del d√≠a actual")
            return matching_count

        except imaplib.IMAP4.error as e:
            self._log(f"‚ùå Error IMAP para criterio '{search_criteria}': {e}")
            return 0
        except Exception as e:
            self._log(f"üí• Error inesperado en b√∫squeda IMAP para '{search_criteria}': {e}")
            return 0
        finally:
            # Cerrar conexi√≥n IMAP
            if mail:
                try:
                    mail.close()
                    mail.logout()
                except:
                    pass

    def _decode_subject(self, subject):
        """
        Decodifica el asunto del correo si est√° codificado.

        Args:
            subject (str): Asunto codificado

        Returns:
            str: Asunto decodificado
        """
        try:
            decoded_parts = decode_header(subject)
            decoded_subject = ""

            for part, encoding in decoded_parts:
                if isinstance(part, bytes):
                    if encoding:
                        decoded_subject += part.decode(encoding)
                    else:
                        decoded_subject += part.decode('utf-8', errors='ignore')
                else:
                    decoded_subject += part

            return decoded_subject
        except Exception as e:
            self._log(f"‚ö†Ô∏è Error decodificando asunto: {e}")
            return subject if isinstance(subject, str) else str(subject)

    def _load_smtp_config(self):
        """
        Carga la configuraci√≥n SMTP desde el archivo.

        Returns:
            dict: Configuraci√≥n SMTP o None si no existe
        """
        try:
            if self.smtp_config_file.exists():
                with open(self.smtp_config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                self._log("‚öôÔ∏è Configuraci√≥n SMTP cargada para b√∫squeda IMAP")
                return config
        except Exception as e:
            self._log(f"‚ùå Error cargando configuraci√≥n SMTP: {e}")
        return None

    def _load_cache(self):
        """Carga la cach√© de correos desde el archivo."""
        if self.cache_file.exists():
            try:
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    all_cache = json.load(f)

                # Limpiar cach√© antigua (solo mantener del d√≠a actual)
                today_str = date.today().isoformat()
                self.email_cache = {
                    key: value for key, value in all_cache.items()
                    if key.startswith(today_str)
                }

                self._log(f"üíæ Cach√© de correos cargada: {len(self.email_cache)} entradas del d√≠a actual")
            except Exception as e:
                self._log(f"‚ö†Ô∏è Error al cargar cach√©: {e}")
                self.email_cache = {}
        else:
            self.email_cache = {}

    def _save_cache(self):
        """Guarda la cach√© de correos en el archivo."""
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.email_cache, f, indent=4, ensure_ascii=False)
        except Exception as e:
            self._log(f"‚ö†Ô∏è Error al guardar cach√©: {e}")

    def _log(self, message):
        """
        Registra mensaje en el log.

        Args:
            message (str): Mensaje a registrar
        """
        if self.log_callback:
            self.log_callback(message)

    def clear_cache(self):
        """Limpia la cach√© de b√∫squedas."""
        self.email_cache = {}
        try:
            if self.cache_file.exists():
                os.remove(self.cache_file)
            self._log("üóëÔ∏è Cach√© de correos limpiada")
        except Exception as e:
            self._log(f"‚ö†Ô∏è Error al limpiar cach√©: {e}")

    def get_cache_info(self):
        """
        Obtiene informaci√≥n sobre la cach√© actual.

        Returns:
            dict: Informaci√≥n de la cach√©
        """
        today_str = date.today().isoformat()
        today_entries = len([k for k in self.email_cache.keys() if k.startswith(today_str)])

        return {
            "total_entries": len(self.email_cache),
            "today_entries": today_entries,
            "cache_date": today_str,
            "enhanced_search": True  # Indicador de que usa b√∫squeda mejorada
        }